> O composer possui um repositório central de pacotes: https://packagist.org/
    É possível configurar repositórios de outras fontes (do github, zip etc)

> O pacotes guzzlehttp/guzzle serve para executar requisições HTTP de alto nível

> Para instalar uma dependência (pacote) basta executar: composer require <nome do pacote>
    Composer guarda as dependências e dependências transitivas na pasta vendor do projeto

> O nome e versão da dependências fica salvo no arquivo composer.json
    o comando require adiciona automaticamente a dependência no composer.json
> O comando "compose install" automaticamente baixa todas as dependências no composer.json

> O arquivo composer.lock define todas as versões exatas instaladas

> O composer já gera um arquivo autoload.php para facilitar o carregamento das dependências
        Basta usar require vendor/autoload.php


> A PSR-4 define um padrão para o carregamento automático de classes
> O namespace da classe tem partes:

    O vendor namespace (ou namespace padrão ou namespace prefixo)
        O vendor namespace fica mapeado para uma pasta do projeto dentro do arquivo composer.json
    Podemos ter um sub-namespace que precisa ser representado através de pastas

    "autoload": {
        "psr-4": {
            "Alura\\BuscadorDeCursos\\": "src/"
        }
    }

>Para atualizar o arquivo autoload.php baseado no composer.json, podemos rodar o comando
    "composer dumpautoload"
> Para classes que não seguem o PSR-4, podemos definir um classmap dentro do composer.json
Para carregar um biblioteca de funções automaticamente, podemos adicionar uma entrada files no composer.json

> Através do flag "--dev" definimos que uma dependência não faz parte do ambiente de produção
> Caso desejarmos baixar as dependências de "produção" apenas podemos usar o flag "no-dev"
> Arquivos executáveis fornecidos por componentes instalados pelo composer ficam na pasta 
vendor/bin
> Três ferramentas do mundo PHP:
    phpunit para rodar testes;
    phpcs para verificar padrões de código;
    phan para executar uma análise estática da sintaxe do nosso código.

> O composer entende as tags de versão de um repositório Git
> O composer segue o conceito do versionamento semântico (MAJOR.MINOR.PATCH)
> No composer.json podemos definir constraints
    (mais detalhes em https://getcomposer.org/doc/articles/versions.md)
> Para distribuir e disponibilizar o seu projeto devemos:
    Criar um repositório no Github;
    Usar o packgist e associar com o repositório no Github.

